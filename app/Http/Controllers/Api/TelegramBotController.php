<?php

namespace App\Http\Controllers\Api;

use App\Http\Controllers\Controller;
use App\Models\Appointment;
use App\Models\Barber;
use Illuminate\Http\Request;
use Illuminate\Support\Carbon;
use Illuminate\Support\Facades\Cache;
use Telegram\Bot\Api;
use Telegram\Bot\FileUpload\InputFile;
use Telegram\Bot\Keyboard\Keyboard;

class TelegramBotController extends Controller
{
    protected Api $telegram;

    public function __construct()
    {
        $this->telegram = new Api(config('services.telegram.bot_token'));
    }

    public function webhook(Request $request)
    {
        $update = $this->telegram->getWebhookUpdate();
        $message = $update->getMessage();

        if (!$message) {
            return response()->json(['status' => 'no message'], 200);
        }

        $chatId = $message->getChat()->getId();

        // –ï—Å–ª–∏ –±–∞—Ä–±–µ—Ä –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–æ—Ç–æ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
        if ($message->has('photo')) {
            $this->handlePhotoMessage($chatId, $message->getPhoto());
            return response()->json(['status' => 'photo handled'], 200);
        }

        $text = trim($message->getText());

        // –ö–æ–Ω—Ç–∞–∫—Ç ‚Äî –∫–ª–∏–µ–Ω—Ç
        if ($message->has('contact')) {
            $phone = $message->getContact()->getPhoneNumber();
            return $this->handleClientPhone($chatId, $phone);
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        $barber = Barber::where('telegram_chat_id', $chatId)->first();

        // === –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –±–∞—Ä–±–µ—Ä–∞ ===
        if ($barber) {
            return $this->handleBarberCommands($chatId, $text, $barber);
        }

        // === –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ ===
        return $this->handleClientCommands($chatId, $text);
    }

    protected function handleClientCommands($chatId, $text)
    {
        if ($text === 'üìå –ó–∞–ø–∏—Å–∞—Ç—å—Å—è') {
            $this->telegram->sendMessage([
                'chat_id' => $chatId,
                'text' => '–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: ' . route('booking.index'),
            ]);
        } elseif ($text === 'üìÖ –ú–æ–∏ –∑–∞–ø–∏—Å–∏') {
            $this->sendPhoneRequestKeyboard($chatId);
        } elseif ($text === 'üßî –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞') {
            $this->telegram->sendMessage([
                'chat_id' => $chatId,
                'text' => '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:',
            ]);
        } elseif (preg_match('/^[a-f0-9\-]{36}$/', $text)) {
            $barber = Barber::where('auth_token', $text)->first();
            if ($barber) {
                $barber->update(['telegram_chat_id' => $chatId]);
                $this->telegram->sendMessage([
                    'chat_id' => $chatId,
                    'text' => "–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ –º–∞—Å—Ç–µ—Ä: {$barber->name}",
                ]);
            } else {
                $this->telegram->sendMessage([
                    'chat_id' => $chatId,
                    'text' => '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.',
                ]);
            }
        } else {
            $this->sendClientDefaultKeyboard($chatId);
        }

        return response()->json(['status' => 'ok'], 200);
    }

    protected function handleBarberCommands($chatId, $text, Barber $barber)
    {
        if ($text === 'üìã –ú–æ–∏ –∫–ª–∏–µ–Ω—Ç—ã') {
            return $this->sendBarberAppointments($chatId, $barber);
        }

        if ($text === 'üßë‚Äçüíº –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å') {
            return $this->sendBarberProfile($chatId, $barber);
        }

        if ($text === '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ') {
            return $this->handleChangePhotoCommand($chatId);
        }

        if ($text === 'üö™ –í—ã–π—Ç–∏') {
            $barber->update(['telegram_chat_id' => null]);
            $this->telegram->sendMessage([
                'chat_id' => $chatId,
                'text' => '–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞ –º–∞—Å—Ç–µ—Ä–∞.',
            ]);
            $this->sendClientDefaultKeyboard($chatId);
        } else {
            $this->sendBarberDefaultKeyboard($chatId);
        }

        return response()->json(['status' => 'ok'], 200);
    }

    protected function sendPhoneRequestKeyboard($chatId)
    {
        $keyboard = Keyboard::make([
            'keyboard' => [
                [Keyboard::button([
                    'text' => 'üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä',
                    'request_contact' => true,
                ])]
            ],
            'resize_keyboard' => true,
            'one_time_keyboard' => true,
        ]);

        $this->telegram->sendMessage([
            'chat_id' => $chatId,
            'text' => '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:',
            'reply_markup' => $keyboard,
        ]);
    }

    protected function sendClientDefaultKeyboard($chatId)
    {
        $keyboard = Keyboard::make([
            'keyboard' => [
                ['üìå –ó–∞–ø–∏—Å–∞—Ç—å—Å—è'],
                ['üìÖ –ú–æ–∏ –∑–∞–ø–∏—Å–∏'],
                ['üßî –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞'],
            ],
            'resize_keyboard' => true,
            'one_time_keyboard' => false,
        ]);

        $this->telegram->sendMessage([
            'chat_id' => $chatId,
            'text' => "–ü—Ä–∏–≤–µ—Ç! –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –∑–∞–ø–∏—Å–∏.",
            'reply_markup' => $keyboard,
        ]);
    }

    protected function sendBarberDefaultKeyboard($chatId)
    {
        $keyboard = Keyboard::make([
            'keyboard' => [
                ['üìã –ú–æ–∏ –∫–ª–∏–µ–Ω—Ç—ã'],
                ['üßë‚Äçüíº –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å'],
                ['‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ'],
                ['üö™ –í—ã–π—Ç–∏'],
            ],
            'resize_keyboard' => true,
            'one_time_keyboard' => false,
        ]);

        $this->telegram->sendMessage([
            'chat_id' => $chatId,
            'text' => "–ü—Ä–∏–≤–µ—Ç! –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ –º–∞—Å—Ç–µ—Ä.",
            'reply_markup' => $keyboard,
        ]);
    }

    protected function handleClientPhone($chatId, $phone)
    {
        $formattedPhone = $this->formatPhoneLikeInDb($phone);
        return $this->sendAppointments($chatId, $formattedPhone);
    }

    protected function sendAppointments($chatId, $phone)
    {
        $appointments = Appointment::with(['barber', 'services'])
            ->where('client_phone', $phone)
            ->orderBy('date')
            ->get();

        if ($appointments->isEmpty()) {
            $this->telegram->sendMessage([
                'chat_id' => $chatId,
                'text' => '–ó–∞–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.',
            ]);
            return;
        }

        $messageText = "*–í–∞—à–∏ –∑–∞–ø–∏—Å–∏:*\n\n";
        foreach ($appointments as $appointment) {
            $date = \Carbon\Carbon::parse($appointment->date)->format('d.m.y');
            $time = \Carbon\Carbon::parse($appointment->time)->format('H:i');

            $messageText .= "üìÖ *{$date}* –≤ üïí *{$time}*\n";
            $messageText .= "üßî –ú–∞—Å—Ç–µ—Ä: *" . optional($appointment->barber)->name . "*\n";
            $messageText .= "üíà –£—Å–ª—É–≥–∏:\n";

            foreach ($appointment->services as $service) {
                $messageText .= "‚Ä¢ {$service->name} ({$service->pivot->price}‚Ç∏)\n";
            }

            $messageText .= "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n";
        }

        $this->telegram->sendMessage([
            'chat_id' => $chatId,
            'text' => $messageText,
            'parse_mode' => 'Markdown',
        ]);
    }

    protected function sendBarberAppointments($chatId, Barber $barber)
    {
        $appointments = $barber->appointments()->whereDate('date', '>=', now())->orderBy('date')->get();

        if ($appointments->isEmpty()) {
            $this->telegram->sendMessage([
                'chat_id' => $chatId,
                'text' => '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.',
            ]);
            return;
        }

        $messageText = "*–í–∞—à–∏ –∫–ª–∏–µ–Ω—Ç—ã:*\n\n";
        foreach ($appointments as $appointment) {
            $date = Carbon::parse($appointment->date)->format('d.m.y');
            $time = Carbon::parse($appointment->time)->format('H:i');
            $messageText .= "üìÖ *{$date}* –≤ üïí *{$time}*\n";
            $messageText .= "üë§ {$appointment->client_name}\n";
            $messageText .= "üìû {$appointment->client_phone}\n";

            foreach ($appointment->services as $service) {
                $messageText .= "‚ñ´Ô∏è {$service->name} ({$service->pivot->price}‚Ç∏)\n";
            }

            $messageText .= "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n";
        }

        $this->telegram->sendMessage([
            'chat_id' => $chatId,
            'text' => $messageText,
            'parse_mode' => 'Markdown',
        ]);
    }

    protected function sendBarberProfile($chatId, Barber $barber)
    {
        $caption = "*–ü—Ä–æ—Ñ–∏–ª—å –º–∞—Å—Ç–µ—Ä–∞*\n\n";
        $caption .= "üë§ *{$barber->name}*\n";
        $caption .= "üìç –§–∏–ª–∏–∞–ª: " . optional($barber->branch)->name . "\n";

        // üõ† –£—Å–ª—É–≥–∏ –º–∞—Å—Ç–µ—Ä–∞
        $services = $barber->services;
        if ($services->isNotEmpty()) {
            $caption .= "\nüíà *–£—Å–ª—É–≥–∏:*\n";
            foreach ($services as $service) {
                $caption .= "‚Ä¢ {$service->name} ‚Äî {$service->price}‚Ç∏\n";
            }
        } else {
            $caption .= "\nüíà –£—Å–ª—É–≥–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã\n";
        }

        // üñº –§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è
        if ($barber->photo) {
            $photoPath = public_path($barber->photo); // ‚ùó –±–µ–∑ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è 'uploads/barbers/'

            if (file_exists($photoPath)) {
                $this->telegram->sendPhoto([
                    'chat_id' => $chatId,
                    'photo' => InputFile::create($photoPath),
                    'caption' => $caption,
                    'parse_mode' => 'Markdown',
                ]);
                return;
            } else {
                $caption .= "\n‚ö†Ô∏è *–§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ*";
            }
        } else {
            $caption .= "\nüñº –§–æ—Ç–æ: _–Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ_";
        }

        // Fallback: —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        $this->telegram->sendMessage([
            'chat_id' => $chatId,
            'text' => $caption,
            'parse_mode' => 'Markdown',
        ]);
    }

    private function formatPhoneLikeInDb(string $input): string
    {
        $digits = preg_replace('/\D+/', '', $input);

        if (strlen($digits) === 11 && str_starts_with($digits, '7')) {
            return '+7 ' . substr($digits, 1, 3) . ' ' . substr($digits, 4, 3) . ' ' . substr($digits, 7, 4);
        }

        return $input;
    }

    protected function handleChangePhotoCommand($chatId)
    {
        Cache::put("barber_waiting_photo_$chatId", true, now()->addMinutes(5)); // –ó–∞–ø–æ–º–Ω–∏–º –Ω–∞ 5 –º–∏–Ω—É—Ç

        $this->telegram->sendMessage([
            'chat_id' => $chatId,
            'text' => 'üì∑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è',
        ]);
    }

    protected function handlePhotoMessage($chatId, $photo)
    {
        if (!Cache::get("barber_waiting_photo_$chatId")) {
            return; // –ù–∏–∫–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ –±—ã–ª–æ
        }

        $barber = Barber::where('telegram_chat_id', $chatId)->first();
        if (!$barber) {
            $this->telegram->sendMessage([
                'chat_id' => $chatId,
                'text' => '‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω',
            ]);
            return;
        }

        // –ë–µ—Ä–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø–æ –∫–∞—á–µ—Å—Ç–≤—É —Ñ–æ—Ç–æ
        $photoId = collect($photo)->last()['file_id'];

        // –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª Telegram
        $file = $this->telegram->getFile(['file_id' => $photoId]);
        $filePath = $file->getFilePath();
        $url = "https://api.telegram.org/file/bot" . config('services.telegram.bot_token') . "/$filePath";

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è
        $filename = uniqid() . '.jpg';
        $savePath = public_path("uploads/barbers/$filename");

        // –°–∫–∞—á–∏–≤–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        file_put_contents($savePath, file_get_contents($url));

        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ
        $barber->photo = "uploads/barbers/$filename";
        $barber->save();

        // –£–¥–∞–ª—è–µ–º –∏–∑ –∫—ç—à–∞
        Cache::forget("barber_waiting_photo_$chatId");

        $this->telegram->sendMessage([
            'chat_id' => $chatId,
            'text' => '‚úÖ –§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!',
        ]);
    }
}
