<?php

namespace App\Http\Controllers\Api;

use App\Http\Controllers\Controller;
use App\Models\Appointment;
use Illuminate\Http\Request;
use App\Services\TelegramBotService;

class TelegramBotController extends Controller
{
    protected TelegramBotService $telegram;

    public function __construct(TelegramBotService $telegram)
    {
        $this->telegram = $telegram;
    }

    public function webhook(Request $request)
    {
        $update = $this->telegram->getWebhookUpdate(); // –∏—Å–ø–æ–ª—å–∑—É–µ–º Webhook update

        $message = $update->getMessage();
        if (!$message) {
            return response()->json(['status' => 'no message'], 200);
        }

        $chatId = $message->getChat()->getId();
        $text = trim($message->getText());

        // –£–¥–∞–ª–∏–º –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–æ–≤–µ—Ä–∏–º, –ø–æ—Ö–æ–∂–µ –ª–∏ —ç—Ç–æ –Ω–∞ –Ω–æ–º–µ—Ä
        if (preg_match('/^\+?\d{10,12}$/', preg_replace('/\s+/', '', $text))) {
            $formattedPhone = $this->formatPhoneLikeInDb($text);

            $appointments = Appointment::with('services')
                ->where('client_phone', $formattedPhone)
                ->get();

            if ($appointments->isEmpty()) {
                $this->telegram->sendMessage($chatId, "–ó–∞–ø–∏—Å–µ–π —Å –Ω–æ–º–µ—Ä–æ–º {$formattedPhone} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.");
            } else {
                $reply = "–í–∞—à–∏ –∑–∞–ø–∏—Å–∏:\n\n";

                foreach ($appointments as $appointment) {
                    $time = $appointment->time;
                    $status = $appointment->status;

                    $services = $appointment->services->map(function ($service) {
                        return $service->name . " ({$service->pivot->price} —Ç–≥, {$service->pivot->duration} –º–∏–Ω)";
                    })->implode(", ");

                    $reply .= "üìÖ –î–∞—Ç–∞/–≤—Ä–µ–º—è: {$time}\n";
                    $reply .= "üìå –°—Ç–∞—Ç—É—Å: {$status}\n";
                    $reply .= "üíà –£—Å–ª—É–≥–∏: {$services}\n\n";
                }

                $this->telegram->sendMessage($chatId, $reply);
            }
        } else {
            $this->telegram->sendMessage($chatId, "–ü—Ä–∏–≤–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +77007102135 (–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤), —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–∏ –∑–∞–ø–∏—Å–∏.");
        }

        return response()->json(['status' => 'ok'], 200);
    }

    /**
     * –ü—Ä–∏–≤–æ–¥–∏—Ç –Ω–æ–º–µ—Ä –∫ —Ñ–æ—Ä–º–∞—Ç—É, –≤ –∫–æ—Ç–æ—Ä–æ–º –æ–Ω —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –±–∞–∑–µ: +7 700 710 2135
     */
    private function formatPhoneLikeInDb(string $input): string
    {
        // –£–¥–∞–ª–∏–º –≤—Å—ë, –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
        $digits = preg_replace('/\D+/', '', $input);

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç +7 700 710 2135
        if (strlen($digits) === 11 && str_starts_with($digits, '7')) {
            return '+7 ' . substr($digits, 1, 3) . ' ' . substr($digits, 4, 3) . ' ' . substr($digits, 7, 4);
        }

        return $input; // fallback, –µ—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–µ—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω
    }
}
